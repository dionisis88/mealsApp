package Forms;


import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.gson.stream.JsonReader;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.io.StringReader;
import javax.swing.DefaultListModel;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author pcnone
 */
public class MealsList extends javax.swing.JFrame {

    /**
     * Creates new form MealsList
     */
    public MealsList() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        list1 = new java.awt.List();
        label1 = new java.awt.Label();
        list2 = new java.awt.List();
        label2 = new java.awt.Label();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        label1.setText("Please select Category:");

        list2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                list2ActionPerformed(evt);
            }
        });

        label2.setText("Meal's name: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(list1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 177, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(list2, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(list2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(list1, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void list2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_list2ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_list2ActionPerformed
        
    public void searchCategory(){
        // Creating an OkHttpClient instance
        OkHttpClient client = new OkHttpClient();

        // Creating a Request object with the API endpoint URL
        Request request = new Request.Builder()
                .url("https://www.themealdb.com/api/json/v1/1/categories.php")
                .build();
        
        //jsonString = "{\"categories\": [{\"strCategory\"}]";
        
        try {
            // Sending the HTTP request and getting the response
            Response response = client.newCall(request).execute();       
            
            // Parsing the response body using Gson and JsonParser
            Gson gson = new Gson();
            JsonParser parser = new JsonParser();
            JsonObject rootObject = parser.parse(response.body().string()).getAsJsonObject();
            JsonArray categoriesArray = rootObject.getAsJsonArray("categories");

            DefaultListModel<JsonObject> listModel = new DefaultListModel<JsonObject>();
            listModel.addElement(rootObject);
            
            
            // Looping through the categories array and printing the category names
            for (int i = 0; i < categoriesArray.size(); i++) {
                
                JsonObject categoryObject = categoriesArray.get(i).getAsJsonObject();
                String categoryName = categoryObject.get("strCategory").getAsString();
                //System.out.println(categoryName);
                list1.add(categoryName);

            }   
            
            list1.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 1) {
                    // Get the selected item from the List

                    String selectedItem = list1.getSelectedItem();
                    list2.clear();
                    String url = "https://www.themealdb.com/api/json/v1/1/filter.php?c=" + selectedItem;
                    JsonReader reader = new JsonReader(new StringReader(url));
                    reader.setLenient(true);
                    getStrMeal(url);
                    
                }
            }
        });
            
            
            // Closing the response body
            response.close();
        }
            catch(IOException e){
                System.out.println(e);
               }
    }
    public void getStrMeal(String url){
        // Creating an OkHttpClient instance
        OkHttpClient client = new OkHttpClient();
        
        //String selectedItem = list1.getSelectedItem();
        
        //String selectedItem = mealsList1.list1.getSelectedItem();
//       String url1 = "https://www.themealdb.com/api/json/v1/1/filter.php?c=";
//                    
        
        
        // Creating a Request object with the API endpoint URL
        Request request = new Request.Builder()
                .url(url)
                .build();
        
        //jsonString = "{\"categories\": [{\"strCategory\"}]";
        
        try {
            // Sending the HTTP request and getting the response
            Response response = client.newCall(request).execute();       
            JsonReader reader = new JsonReader(new StringReader(url));
            reader.setLenient(true);

            // Parsing the response body using Gson and JsonParser
            Gson gson = new Gson();
            JsonParser parser = new JsonParser();
            JsonObject rootObject = parser.parse(response.body().string()).getAsJsonObject();
            JsonArray mealsArray = rootObject.getAsJsonArray("meals");

            DefaultListModel<JsonObject> listModel = new DefaultListModel<JsonObject>();
            listModel.addElement(rootObject);
            
            
            // Looping through the categories array and printing the category names
            for (int i = 0; i < mealsArray.size(); i++) {
                
                JsonObject mealsObject = mealsArray.get(i).getAsJsonObject();
                String mealsName = mealsObject.get("strMeal").getAsString();
                //System.out.println(mealsName);
                list2.add(mealsName);

            }           
            
            // Closing the response body
            response.close();
        }
            catch(IOException e){
                System.out.println(e);
               }
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MealsList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MealsList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MealsList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MealsList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MealsList().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.List list1;
    private java.awt.List list2;
    // End of variables declaration//GEN-END:variables
}
